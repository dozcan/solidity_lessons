1) kütüphaneler state objesi tutmaz
2) nesnenin kendisini tutmaz, nesnenin pointer ı geçirilir buda sadece storage keywordü le olur işlem yaptırılır ve dönülür

pragma solidity ^0.5.0;

library math {

  function add(uint a,uint b) public pure returns(uint c){
      c = a + b;
  }
}

contract calc {
    uint c;
    function calcAdd()public returns(uint){
         c = math.add(3,4);
         return c;
    }
}

=> burada gas tüketimi çok düşüyor

pragma solidity ^0.5.0;


contract math {

  function add(uint a,uint b) external pure returns(uint c){
      c = a + b;
  }
}


contract calc {
    uint c;
    function calcAdd()public returns(uint){
        math mathContract = new math();
         c = mathContract.add(3,4);
         return c;
    }

}
**************************************************************************
library yazarken external metod yazmak lazım izra daha az gas tüketiyor
**************************************************************************

pragma solidity ^0.5.0;


library SafeMath {

  function add(uint a,uint b) external pure returns(uint ){
      uint c = a + b;
      return c;
      
  }
}


contract calc {
    using SafeMath for uint;
    uint c;
    function calcAdd(uint a, uint b)public {
         c = a.add(b);
    }
    function get()public view returns(uint){
        return c;
    }

}




//Write your own contracts here. Currently compiles using solc v0.4.15+commit.bbb8e64f.
pragma solidity ^0.4.18;

import './Set.sol';
import './D.sol';

contract  C {
    
    Set.Data concreteData;
    function insert(uint value) public returns (bool){
        return Set.insert(concreteData,value);
    }
     function remove(uint value) public returns (bool){
        return Set.insert(concreteData,value);
    }
    function contains(uint value) public view returns (bool){
        return Set.contains(concreteData,value);
    }
    function get()public view returns (address,address){
        D newDContract = new D();
        return (newDContract.get(),address(this));
    }
}

library Set{
    
    struct Data {
        mapping(uint => bool) flags;
    }
    
    function insert(Data storage self,uint value) public returns(bool){
        if(self.flags[value])
            return false;  
        self.flags[value] = true;
    }
    
    function remove(Data storage self,uint value) public returns (bool){
        if(!self.flags[value])
            return false;
        self.flags[value] = false;
        return true;    
    }
    
    function contains(Data storage self, uint value) public view returns (bool){
        return self.flags[value];
    }
}

contract D {
    function get() public view returns(address){
        return this;
    }
}


pragma solidity ^0.4.21;
pragma experimental ABIEncoderV2;

æ
library PersonLibrary {
    
    struct person{
        string name;
        uint256 age;
    }
    
    function set (person storage self,string _name, uint256 _age) public {
        self.name = _name;
        self.age = _age;
    }
}


contract Person {
    using PersonLibrary for PersonLibrary.person;
    
     PersonLibrary.person[] _personconcrete;
    
    PersonLibrary.person private self;
    
    function create(string _name, uint256 _age) public {
        self.set(_name,_age);
        _personconcrete.push(self);
    }
    function get()public view returns(PersonLibrary.person[] memory){
        return _personconcrete;
    }
}
