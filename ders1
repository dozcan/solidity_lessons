zaman kullanma

pragma solidity ^0.4.19;

contract Savings {
    address owner;
    uint256 deadline;

    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    function deposit(uint256 amount) public payable {
        require(msg.value == amount);
    }

    constructor(uint256 numberOfDays) public payable {
        owner = msg.sender;
        deadline = now + (numberOfDays * 1 days);
    }

    function withdraw() public onlyOwner {
        require(now >= deadline);

        msg.sender.transfer(address(this).balance);
    }
}



2) delegetacall kullanma ilk ornek

delegatecall is a low level function similar to call.

When contract A executes delegatecall to contract B, B's code is excuted

with contract A's storage, msg.sender and msg.value.

pragma solidity ^0.8.0;
contract B{
    uint public num;
    address public sender;
    uint public value;
    
    function setVars(uint _num) public payable{
        num = _num;
        sender = msg.sender;
        value = msg.value;
    }
}
contract A{
    uint public num;
    address public sender;
    uint public value;
    
    function setVars(address _contract, uint _num) public payable returns(bool, bytes memory){
      
        (bool success, bytes memory data) = _contract.delegatecall(
          abi.encodeWithSignature("setVars(uint256)",_num)
        );
        return (success,data);
    }
}


2) delegetacall kullanma ikinci ornek

pragma solidity ^0.8.0;
contract B{

    uint public sonuc;
    address public sender;
    uint public value;
    
    function setVars(uint _num,uint _num2) public payable{
        sonuc = _num2 * _num;
        sender = msg.sender;
        value = msg.value;
    }
}
contract A{

    uint public sonuc;
    address public sender;
    uint public value;
    
    function setVars(address _contract, uint _num,uint _num2) public payable returns(bool, bytes memory){
      
        (bool success, bytes memory data) = _contract.delegatecall(
          abi.encodeWithSignature("setVars(uint256,uint256)",_num,_num2)
        );
        return (success,data);
    }
}
