veri yapıları  evm slotları

1) https://programtheblockchain.com/posts/2018/03/09/understanding-ethereum-smart-contract-storage/


2) yığın


pragma solidity ^0.4.21;

contract Stack {
    bytes[] stack;

    function push(bytes data) public {
        stack.push(data);
    }

    function pop() public returns (bytes data) {
        data = stack[stack.length - 1];

        stack.length -= 1;
    }
}

*****
If the array is empty, bounds checking will cause pop to revert the transaction.
Decreasing the length of a dynamically-sized array has a side effect of zeroing the “removed” items. This is why there’s no need for a delete stack[stack.length - 1].



3) kuyruk

A queue is a “first-in, first-out” (FIFO) data structure with the operations enqueue and dequeue. 
It’s reasonable to implement this with a dynamically-sized array, but a mapping may be a better choice:

pragma solidity ^0.4.21;

contract Queue {
    mapping(uint256 => bytes) queue;
    uint256 first = 1;
    uint256 last = 0;

    function enqueue(bytes data) public {
        last += 1;
        queue[last] = data;
    }

    function dequeue() public returns (bytes data) {
        require(last >= first);  // non-empty queue

        data = queue[first];

        delete queue[first];
        first += 1;
    }
}


3) 
